AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Load Balancer for the application'


Parameters:
  M1Port:
    Type: Number

  M2Port:
    Type: Number

#Resources
#########
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "MyALB"
      Scheme: internet-facing
      Subnets:
        - !ImportValue PublicSubnet1Id
        - !ImportValue PublicSubnet2Id
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  #Security Group
  #########
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !ImportValue VpcId
      SecurityGroupIngress:
        #For Jenkins
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080

        #For Microservice 1
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: !Ref M1Port
          ToPort: !Ref M1Port

        #For Microservice2
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: !Ref M2Port
          ToPort: !Ref M2Port
      
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  #Target Groups
  #########

  TargetGroup8081:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue VpcId
      Port: !Ref M1Port
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /microservice1/health
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: 200-299

  TargetGroup8082:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue VpcId
      Port: !Ref M2Port
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /microservice2/health
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: 200-299

  TargetGroup8080:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue VpcId
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /jenkins/health
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: 200-299

  #Listener
  ############

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup8081
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref M1Port
      Protocol: HTTP
    DependsOn: 
    - TargetGroup8081
    - TargetGroup8082
    - TargetGroup8080

  #route to microservice1
  ALBListenerRuleMicroservice1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup8081
      Conditions:
        - Field: path-pattern
          Values:
            - /microservice1/*
      ListenerArn: !Ref ALBListener
      Priority: 1
    DependsOn: 
    - ALBListener

  ALBListenerRuleHealthCheckMicro1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup8081
      Conditions:
        - Field: path-pattern
          Values:
            - /microservice1/health
      ListenerArn: !Ref ALBListener
      Priority: 2
    DependsOn: 
    - ALBListener


  #route to microservice2
  ALBListenerRuleMicroservice2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup8082
      Conditions:
        - Field: path-pattern
          Values:
            - /microservice2/*
      ListenerArn: !Ref ALBListener
      Priority: 3
    DependsOn: 
    - ALBListener

  ALBListenerRuleHealthCheckMicro2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup8082
      Conditions:
        - Field: path-pattern
          Values:
            - /microservice2/health
      ListenerArn: !Ref ALBListener
      Priority: 4
    DependsOn: 
    - ALBListener


  #route to jenkins
  ALBListenerRuleJenkins:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup8080
      Conditions:
        - Field: path-pattern
          Values:
            - /jenkins/*
      ListenerArn: !Ref ALBListener
      Priority: 5
    DependsOn: 
    - ALBListener

  ALBListenerRuleHealthCheckJenkins:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup8080
      Conditions:
        - Field: path-pattern
          Values:
            - /jenkins/health
      ListenerArn: !Ref ALBListener
      Priority: 6
    DependsOn: 
    - ALBListener

Outputs:
  AlbUrl:
    Description: "The URL of the ALB"
    Value: !Sub "http://${LoadBalancer.DNSName}"

  LoadBalancerSecurityGroupId:
    Description: "LoadBalancerSecurityGroupd ID"
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: LoadBalancerSecurityGroupId


  
  TargetGroup8080Arn:
    Description: "TargetGroup8080 Arn"
    Value: !Ref TargetGroup8080
    Export:
      Name: TargetGroup8080Arn

  TargetGroup8081Arn:
    Description: "TargetGroup8081 Arn"
    Value: !Ref TargetGroup8081
    Export:
      Name: TargetGroup8081Arn

  TargetGroup8082Arn:
    Description: "TargetGroup8082 Arn"
    Value: !Ref TargetGroup8082
    Export:
      Name: TargetGroup8082Arn

  

