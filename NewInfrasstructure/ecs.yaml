Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "MyECSCluster"

  Microservice1TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "Microservice1Task"
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: "Microservice1"
          Image: !Ref microservice1Image
          Essential: true
          Environment:
            - Name: "SQS_URL"
              Value: !Ref SQSQueueURL

  Microservice2TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "Microservice2Task"
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: "Microservice2"
          Image: !Ref microservice2Image
          Essential: true
          Environment:
            - Name: "SQS_URL"
              Value: !Ref SQSQueueURL
            - Name: "S3_BUCKET"
              Value: !Ref S3BucketName
    
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "my-microservice-task"
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: "my-microservice"
          Image: "your-ecr-repository/my-microservice-image"
          Essential: true
          Memory: 512
          Cpu: 256
          Environment:
            - Name: SQS_QUEUE_URL
              Value: !Ref MySQSQueue  # משתנה סביבה עבור SQS
            - Name: S3_BUCKET_URI
              Value: !Sub "https://s3.${AWS::Region}.amazonaws.com/${MyS3Bucket}"  # משתנה סביבה עבור S3
            - Name: SSM_PARAMETER_URI
              Value: !Sub "https://ssm.${AWS::Region}.amazonaws.com/parameters/${MySSMParameter}"  # משתנה סביבה עבור SSM
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"



#Security Group
#########
  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080  # Port for Jenkins
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # Allow traffic from ALB
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  # Allow all outbound traffic (for access to internet via NAT Gateway)

#Services
#########
  Microservice1Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref Microservice1TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PrivateSubnet1]
          SecurityGroups: [!Ref ECSServiceSecurityGroup]

  Microservice2Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref Microservice2TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PrivateSubnet1]
          SecurityGroups: [!Ref ECSServiceSecurityGroup]
